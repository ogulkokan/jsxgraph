<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
		<meta name="generator" content="JsDoc Toolkit" />
         <link rel="stylesheet" type="text/css" href="../static/jsxgraph.css" />
         <script type="text/javascript" src="../static/jquery.min.js"></script>
         <script type="text/javascript" src="../static/jsxgraphcore.js"></script>
		{! Link.base = "../"; /* all generated links will be relative to this */ !}
		<title>JSXGraph Reference - {+data.alias+}</title>

        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800" />
		<style type="text/css">
			{+include("static/default.css")+}
		</style>
	</head>

	<body>
<!-- ============================== header + ================================= -->
		<!-- begin static/header.html -->
		<!-- {+include("static/header.html")+} -->
		<!-- end static/header.html -->

<!-- ============================== classes index + ============================ -->
		<div id="index">
			<!-- begin publish.classesIndex -->
			<!-- {+publish.classesIndex+} -->
			<!-- end publish.classesIndex -->
		</div>

		<div id="content">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				{!
					var classType = "";

					if (data.isBuiltin()) {
						classType += "Built-In ";
					}

					if (data.isNamespace) {
						if (data.is('FUNCTION')) {
							classType += "Function ";
						}
						classType += "Namespace ";
					}
					else {
						classType += "Class ";
					}
                    if(data.isPseudo)
                        classType = "Element ";
				!}
				{+classType+}{+data.alias+}
			</h1>

<!-- ============================== Inheritance tree + ========================== -->
		<if test="data.bloodline.length">
			<p class="inheritance-tree">
			Inheritance: {!
				var inheritance = data.bloodline.slice().reverse();
				inheritance.push(data.alias);
				output += inheritance.join(' -> ');
			!}
			</p>
		</if>

<!-- ============================== class summary + ========================== -->
			<p class="description">
				{+resolveLinks(data.classDesc)+}

                <if test="data.augments.length"><br />Extends
                    {+
                        data.augments
                        .sort()
                        .map(
                            function($) { return new Link().toSymbol($); }
                        )
                        .join(", ")
                    +}.
                </if>
			</p>

<!-- ============================== constructor summary ??==================== -->
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
				<h2>{+classType+}Summary</h2>
				<div class="constructor-summary">
					<div class="constructor-item">
						<strong>{+data.alias+}</strong>
						<if test="(classType != 'Namespace ') && (classType != 'Element ')">{+ makeSignature(data.params) +}</if>
						{!
							var flags = [];
							if (data.isPrivate) flags.push("private");
							if (data.isInner) flags.push("inner");
							if (flags.length) output += " [" + flags.join(", ") + "]";
						!}
						<if test="data.comment.getTag('hilited').length"> [highlighted]</if>
					</div>
					<div class="constructor-description">
						{+resolveLinks(summarize(data.desc))+}
					</div>
				</div>
			</if>

<!-- ============================== attributes summary *hidden ===================== -->
			<!--
			<if test="data.properties.length">
				{! var ownAttributes = data.properties.filter(function($){return $.memberOf == data.alias && $.isAttribute && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownAttributes.length">
					<h2>Attributes Summary</h2>
					<div class="attributes-list">
					<for each="member" in="ownAttributes">
						<div class="attribute-item">
							<strong>{+member.name+}</strong>:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (member.isConstant) flags.push("constant");
								if (member.deprecated) flags.push("deprecated");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length && !data.isPseudo">
					<h2>Inherited Attributes</h2>
					<div class="inherited-attributes-list">
					{!
						var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorFields = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-attribute-item'><strong>From " + contributor + ":</strong> ";
							output += contributorFields.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>
			-->
<!-- ============================== properties summary *hidden===================== -->
			<!--
			<if test="data.properties.length">
				{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isAttribute && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownProperties.length">
					<h2>Properties Summary</h2>
					<div class="properties-list">
					<for each="member" in="ownProperties">
						<div class="property-item">
							<strong>{+member.name+}</strong>:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (member.isConstant) flags.push("constant");
								if (member.deprecated) flags.push("deprecated");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length && !data.isPseudo">
					<h2>Inherited Properties</h2>
					<div class="inherited-properties-list">
					{!
						var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorProperties = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-property-item'><strong>From " + contributor + ":</strong> ";
							output += contributorProperties.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>
			-->

<!-- ============================== methods summary *hidden ======================== -->
			<!--
			<if test="data.methods.length">
				{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownMethods.length">
					<h2>Methods Summary</h2>
					<div class="methods-list">
					<for each="member" in="ownMethods">
						<div class="method-item">
							<strong>{+member.name+}</strong>{+makeSignature(member.params)+}:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (member.deprecated) flags.push("deprecated");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length">
					<h2>Inherited Methods</h2>
					<div class="inherited-methods-list">
					{!
						var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorMethods = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-method-item'><strong>From " + contributor + ":</strong> ";
							output += contributorMethods.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>
			-->
<!-- ============================== events summary *hidden======================== -->
			<!--
			<if test="data.events.length">
				{! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownEvents.length">
					<h2>Events Summary</h2>
					<div class="events-list">
					<for each="member" in="ownEvents">
						<div class="event-item">
							<strong>{+member.name+}</strong>{+makeSignature(member.params)+}:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length">
					<h2>Inherited Events</h2>
					<div class="inherited-events-list">
					{!
						var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorEvents = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-event-item'><strong>From " + contributor + ":</strong> ";
							output += contributorEvents.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>
			-->

<!-- ============================== constructor details + ==================== -->
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
				<h2>{+classType+} Detail</h2>
				<div class="constructor-detail">
					<div class="constructor-signature">
						<strong>{+data.alias+}</strong>: 
						<if test="data.isPseudo">
							This element has no direct constructor. To create an instance of this element you have to call {+(new Link().toSymbol("JXG.Board#create"))+} with type "{+data.alias.toLowerCase()+}".
						</if>
						<if test="!data.isPseudo">
							{!
								var flags = [];
								if (data.isPrivate) flags.push("private");
								if (data.isInner) flags.push("inner");
								var flagsStr = flags.length ? " [" + flags.join(", ") + "]" : "";
							!}
							{+flagsStr+}<if test="(classType != 'Namespace ') && (classType != 'Element ')">{+makeSignature(data.params)+}</if>
						</if>
					</div>

					<div class="constructor-description">
						{+resolveLinks(data.desc)+}
					</div>

					<if test="data.params.length && !data.isNamespace">
						<div class="constructor-params">
							<h3><if test="data.isPseudo">Possible parent array combinations:</if><if test="!data.isPseudo">Parameters:</if></h3>
							<for each="item" in="data.params">
								<div class="param-item">
									<if test="!data.isPseudo">
										<strong>{+item.name+}</strong>
										<if test="item.type"> ({+item.type+})</if>
										<if test="item.isOptional"> [Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if>]</if>
									</if>
									<if test="data.isPseudo">
										{!
											var itypes = item.type.split('_');
											var inames = item.name.split(',');
											for(var i=0; i<itypes.length; i++) {
												output += "{" + itypes[i] + "} " + inames[i].toString().replace(/_/g, "");
												if(inames[i][inames[i].length-1] == "_")
													output += " [Optional]";
												output += (i < itypes.length - 1) ? ", " : "";
											}
										!}
									</if>
									: {+resolveLinks(item.desc)+}
								</div>
							</for>
						</div>
					</if>

					<if test="data.since">
						<div class="since">
							<h3>Since:</h3>
							<p>{+data.since+}</p>
						</div>
					</if>

					<if test="data.exceptions.length">
						<div class="exceptions">
							<h3>Throws:</h3>
							<for each="item" in="data.exceptions">
								<div class="exception-item">
									<strong>{+item.name+}</strong>
									<if test="item.type"> ({+item.type+})</if>
									: {+resolveLinks(item.desc)+}
								</div>
							</for>
						</div>
					</if>

					<if test="data.returns.length">
						<div class="returns">
							<h3>Returns:</h3>
							<for each="item" in="data.returns">
								<div class="return-item">
									<if test="item.type">({+item.type+})</if>
									{+resolveLinks(item.desc)+}
								</div>
							</for>
						</div>
					</if>

					<if test="data.requires.length">
						<div class="requires">
							<h3>Requires:</h3>
							<ul>
								<for each="item" in="data.requires">
									<li>{+resolveLinks(item)+}</li>
								</for>
							</ul>
						</div>
					</if>

					<if test="data.see.length">
						<div class="see-also">
							<h3>See Also:</h3>
							<ul>
								<for each="item" in="data.see">
									<li>{+item+}</li>
								</for>
							</ul>
						</div>
					</if>

					<if test="data.example.length">
						<div class="examples">
							<h3>Examples:</h3>
							<for each="example" in="data.example">
								<pre><code>{+example+}</code></pre>
							</for>
						</div>
					</if>
				</div>
			</if>

<!-- ============================== attributes details + ========================== -->
		<if test="defined(ownAttributes) && ownAttributes.length">
			<h2>Attribute Detail</h2>
			<for each="member" in="ownAttributes">
				<div class="attribute-item">
					{<if test="member.type">{+member.type+}</if>} <strong>{+member.name+}</strong>: {+resolveLinks(member.desc)+}
					
					<if test="member.example.length">
						<for each="example" in="member.example">
							<pre><code>{+example+}</code></pre>
						</for>
					</if>
					
					<if test="member.since">Since: {+member.since+}</if>
					
					<if test="member.see.length">See: {+member.see.map(item => new Link().toSymbol(item)).join(", ")+}</if>
					
					<if test="member.defaultValue">Default Value: {+resolveLinks(member.defaultValue)+}</if>
				</div>
			</for>
		</if>

<!-- ============================== field details + ========================== -->
			<if test="defined(ownProperties) && ownProperties.length">
				<h2>Field Detail</h2>
				<for each="member" in="ownProperties">
					<div class="field-item">
						{!
							var flags = [];
							if (member.isPrivate) flags.push("private");
							if (member.isInner) flags.push("inner");
							if (member.isStatic) flags.push("static");
							if (member.isConstant) flags.push("constant");
							var flagsStr = flags.length ? "[" + flags.join(", ") + "] " : "";
						!}
						{<if test="member.type">{+member.type+}</if>} <strong>{+member.name+}</strong> {+flagsStr+}: {+resolveLinks(member.desc)+}
						
						<if test="member.example.length">
							Examples:
							<for each="example" in="member.example">
								<pre><code>{+example+}</code></pre>
							</for>
						</if>
						
						<if test="member.since">Since: {+member.since+}</if>
						
						<if test="member.see.length">See: {+member.see.map(item => new Link().toSymbol(item)).join(", ")+}</if>
						
						<if test="member.defaultValue">Default Value: {+resolveLinks(member.defaultValue)+}</if>
					</div>
				</for>
			</if>

<!-- ============================== method details + ========================= -->
			<if test="defined(ownMethods) && ownMethods.length">
				<h2>Method Detail</h2>
				<for each="member" in="ownMethods">
					<div class="method-item">
						{!
							var flags = [];
							if (member.isPrivate) flags.push("private");
							if (member.isInner) flags.push("inner");
							if (member.isStatic) flags.push("static");
							var flagsStr = flags.length ? "[" + flags.join(", ") + "] " : "";
						!}
						{<if test="member.type">{+member.type+}</if>} <strong>{+member.name+}</strong>{+makeSignature(member.params)+} {+flagsStr+}: {+resolveLinks(member.desc)+}

						<if test="member.params.length">
							Parameters:
							<for each="item" in="member.params">
								- {+item.type+} <strong>{+item.name+}</strong><if test="item.isOptional"> [Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if>]</if>: {+resolveLinks(item.desc)+}
							</for>
						</if>

						<if test="member.returns.length">
							Returns:
							<for each="item" in="member.returns">
								{+item.type+}: {+resolveLinks(item.desc)+}
							</for>
						</if>

						<if test="member.exceptions.length">
							Throws:
							<for each="item" in="member.exceptions">
								- {+item.type+} <strong>{+item.name+}</strong>: {+resolveLinks(item.desc)+}
							</for>
						</if>

						<if test="member.requires.length">
							Requires: {+member.requires.map(item => resolveLinks(item)).join(", ")+}
						</if>

						<if test="member.since">Since: {+member.since+}</if>

						<if test="member.see.length">See: {+member.see.map(item => new Link().toSymbol(item)).join(", ")+}</if>

						<if test="member.example.length">
							Examples:
							<for each="example" in="member.example">
								<pre><code>{+example+}</code></pre>
							</for>
						</if>
					</div>
				</for>
			</if>

<!-- ============================== event details + ========================= -->
		<if test="defined(ownEvents) && ownEvents.length">
			<h2>Event Detail</h2>
			<for each="member" in="ownEvents">
				<div class="event-item">
					{!
						var flags = [];
						if (member.isPrivate) flags.push("private");
						if (member.isInner) flags.push("inner");
						if (member.isStatic) flags.push("static");
						var flagsStr = flags.length ? "[" + flags.join(", ") + "] " : "";
					!}
					{<if test="member.type">{+member.type+}</if>} <strong>{+member.name+}</strong>{+makeSignature(member.params)+} {+flagsStr+}: {+resolveLinks(member.desc)+}

					<if test="member.params.length">
						Parameters:
						<for each="item" in="member.params">
							- {+item.type+} <strong>{+item.name+}</strong><if test="item.isOptional"> [Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if>]</if>: {+resolveLinks(item.desc)+}
						</for>
					</if>

					<if test="member.since">Since: {+member.since+}</if>

					<if test="member.exceptions.length">
						Throws:
						<for each="item" in="member.exceptions">
							- {+item.type+} <strong>{+item.name+}</strong>: {+resolveLinks(item.desc)+}
						</for>
					</if>

					<if test="member.returns.length">
						Returns:
						<for each="item" in="member.returns">
							{+item.type+}: {+resolveLinks(item.desc)+}
						</for>
					</if>

					<if test="member.requires.length">
						Requires: {+member.requires.map(item => resolveLinks(item)).join(", ")+}
					</if>

					<if test="member.see.length">See: {+member.see.map(item => new Link().toSymbol(item)).join(", ")+}</if>

					<if test="member.example.length">
						Examples:
						<for each="example" in="member.example">
							<pre><code>{+example+}</code></pre>
						</for>
					</if>
				</div>
			</for>
		</if>

		<!-- ============================== borrowed elements ========================= -->
		<if test="data.isPseudo">
			<if test="data.inheritsFrom.length">
				<h2>Inherited Elements</h2>

				<h3>Inherited Attributes</h3>
				{!
					var borrowedAttributes = data.properties.filter($ => $.memberOf != data.alias && $.isAttribute);
					var contributors = [...new Set(borrowedAttributes.map($ => $.memberOf))];
					for (let contributor of contributors) {
						var contributorAttributes = borrowedAttributes
							.filter($ => $.memberOf === contributor)
							.sort(makeSortby("name"))
							.map($ => new Link().toSymbol($.alias).withText($.name));
						
						output += "<p><strong>From " + new Link().toSymbol(contributor) + ":</strong> ";
						output += contributorAttributes.join(", ");
						output += "</p>";
					}
				!}

				<h3>Inherited Fields</h3>
				{!
					var borrowedFields = data.properties.filter($ => $.memberOf != data.alias && !$.isAttribute);
					var contributors = [...new Set(borrowedFields.map($ => $.memberOf))];
					for (let contributor of contributors) {
						var contributorFields = borrowedFields
							.filter($ => $.memberOf === contributor)
							.sort(makeSortby("name"))
							.map($ => new Link().toSymbol($.alias).withText($.name));
						
						output += "<p><strong>From " + new Link().toSymbol(contributor) + ":</strong> ";
						output += contributorFields.join(", ");
						output += "</p>";
					}
				!}

				<h3>Inherited Methods</h3>
				{!
					var borrowedMethods = data.methods.filter($ => $.memberOf != data.alias);
					var contributors = [...new Set(borrowedMethods.map($ => $.memberOf))];
					for (let contributor of contributors) {
						var contributorMethods = borrowedMethods
							.filter($ => $.memberOf === contributor)
							.sort(makeSortby("name"))
							.map($ => new Link().toSymbol($.alias).withText($.name));
						
						output += "<p><strong>From " + new Link().toSymbol(contributor) + ":</strong> ";
						output += contributorMethods.join(", ");
						output += "</p>";
					}
				!}

				<h3>Inherited Events</h3>
				{!
					var borrowedEvents = data.events.filter($ => $.memberOf != data.alias);
					var contributors = [...new Set(borrowedEvents.map($ => $.memberOf))];
					for (let contributor of contributors) {
						var contributorEvents = borrowedEvents
							.filter($ => $.memberOf === contributor)
							.sort(makeSortby("name"))
							.map($ => new Link().toSymbol($.alias).withText($.name));
						
						output += "<p><strong>From " + new Link().toSymbol(contributor) + ":</strong> ";
						output += contributorEvents.join(", ");
						output += "</p>";
					}
				!}
			</if>
		</if>


<!-- ============================== footer ================================= -->
		<!-- <div class="fineprint" style="clear:both">
			<if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
			Documentation generated by <a href="https://www.npmjs.com/package/jsdoc-toolkit" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
		</div> -->
	</body>
</html>
