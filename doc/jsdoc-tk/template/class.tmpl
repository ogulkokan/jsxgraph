<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
		<meta name="generator" content="JsDoc Toolkit" />
         <link rel="stylesheet" type="text/css" href="../static/jsxgraph.css" />
         <script type="text/javascript" src="../static/jquery.min.js"></script>
         <script type="text/javascript" src="../static/jsxgraphcore.js"></script>
		{! Link.base = "../"; /* all generated links will be relative to this */ !}
		<title>JSXGraph Reference - {+data.alias+}</title>

        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800" />
		<style type="text/css">
			{+include("static/default.css")+}
		</style>
	</head>

	<body>
<!-- ============================== header ================================= -->
		<!-- begin static/header.html -->
		{+include("static/header.html")+}
		<!-- end static/header.html -->

<!-- ============================== classes index ============================ -->
		<div id="index">
			<!-- begin publish.classesIndex -->
			{+publish.classesIndex+}
			<!-- end publish.classesIndex -->
		</div>

		<div id="content">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				{!
					var classType = "";

					if (data.isBuiltin()) {
						classType += "Built-In ";
					}

					if (data.isNamespace) {
						if (data.is('FUNCTION')) {
							classType += "Function ";
						}
						classType += "Namespace ";
					}
					else {
						classType += "Class ";
					}
                    if(data.isPseudo)
                        classType = "Element ";
				!}
				{+classType+}{+data.alias+}
			</h1>

<!-- ============================== Inheritance tree + ========================== -->
		<if test="data.bloodline.length">
			<p class="inheritance-tree">
			Inheritance: {!
				var inheritance = data.bloodline.slice().reverse();
				inheritance.push(data.alias);
				output += inheritance.join(' -> ');
			!}
			</p>
		</if>

<!-- ============================== class summary + ========================== -->
			<p class="description">
				{+resolveLinks(data.classDesc)+}

				<if test="!data.isBuiltin()">{# isn't defined in any file #}
					<br /><br /><i>Defined in: </i> {+new Link().toSrc(data.srcFile)+}.
				</if>

                <if test="data.augments.length"><br />Extends
                    {+
                        data.augments
                        .sort()
                        .map(
                            function($) { return new Link().toSymbol($); }
                        )
                        .join(", ")
                    +}.
                </if>
			</p>

<!-- ============================== constructor summary ??==================== -->
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
				<h2>{+classType+}Summary</h2>
				<div class="constructor-summary">
					<div class="constructor-item">
						<strong>{+data.alias+}</strong>
						<if test="(classType != 'Namespace ') && (classType != 'Element ')">{+ makeSignature(data.params) +}</if>
						{!
							var flags = [];
							if (data.isPrivate) flags.push("private");
							if (data.isInner) flags.push("inner");
							if (flags.length) output += " [" + flags.join(", ") + "]";
						!}
						<if test="data.comment.getTag('hilited').length"> [highlighted]</if>
					</div>
					<div class="constructor-description">
						{+resolveLinks(summarize(data.desc))+}
					</div>
				</div>
			</if>

<!-- ============================== attributes summary + ===================== -->
			<if test="data.properties.length">
				{! var ownAttributes = data.properties.filter(function($){return $.memberOf == data.alias && $.isAttribute && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownAttributes.length">
					<h2>Attributes Summary</h2>
					<div class="attributes-list">
					<for each="member" in="ownAttributes">
						<div class="attribute-item">
							<strong>{+member.name+}</strong>:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (member.isConstant) flags.push("constant");
								if (member.deprecated) flags.push("deprecated");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length && !data.isPseudo">
					<h2>Inherited Attributes</h2>
					<div class="inherited-attributes-list">
					{!
						var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorFields = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-attribute-item'><strong>From " + contributor + ":</strong> ";
							output += contributorFields.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>
<!-- ============================== properties summary ??===================== -->
			<if test="data.properties.length">
				{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isAttribute && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownProperties.length">
					<h2>Properties Summary</h2>
					<div class="properties-list">
					<for each="member" in="ownProperties">
						<div class="property-item">
							<strong>{+member.name+}</strong>:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (member.isConstant) flags.push("constant");
								if (member.deprecated) flags.push("deprecated");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length && !data.isPseudo">
					<h2>Inherited Properties</h2>
					<div class="inherited-properties-list">
					{!
						var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorProperties = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-property-item'><strong>From " + contributor + ":</strong> ";
							output += contributorProperties.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>

<!-- ============================== methods summary + ======================== -->
			<if test="data.methods.length">
				{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownMethods.length">
					<h2>Methods Summary</h2>
					<div class="methods-list">
					<for each="member" in="ownMethods">
						<div class="method-item">
							<strong>{+member.name+}</strong>{+makeSignature(member.params)+}:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (member.deprecated) flags.push("deprecated");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length">
					<h2>Inherited Methods</h2>
					<div class="inherited-methods-list">
					{!
						var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorMethods = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-method-item'><strong>From " + contributor + ":</strong> ";
							output += contributorMethods.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>
<!-- ============================== events summary ??======================== -->
			<if test="data.events.length">
				{! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownEvents.length">
					<h2>Events Summary</h2>
					<div class="events-list">
					<for each="member" in="ownEvents">
						<div class="event-item">
							<strong>{+member.name+}</strong>{+makeSignature(member.params)+}:
							{!
								var flags = [];
								if (member.isPrivate) flags.push("private");
								if (member.isInner) flags.push("inner");
								if (member.isStatic) flags.push("static");
								if (flags.length) output += " [" + flags.join(", ") + "]";
							!}
							{+resolveLinks(summarize(member.desc))+}
						</div>
					</for>
					</div>
				</if>

				<if test="data.inheritsFrom.length">
					<h2>Inherited Events</h2>
					<div class="inherited-events-list">
					{!
						var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
						var contributors = [...new Set(borrowedMembers.map($ => $.memberOf))];
						for (var contributor of contributors) {
							var contributorEvents = borrowedMembers
								.filter($ => $.memberOf === contributor)
								.sort(makeSortby("name"))
								.map($ => $.name);
							
							output += "<div class='inherited-event-item'><strong>From " + contributor + ":</strong> ";
							output += contributorEvents.join(", ");
							output += "</div>";
						}
					!}
					</div>
				</if>
			</if>

<!-- ============================== constructor details + ==================== -->
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
				<h2>{+classType+} Detail</h2>
				<div class="constructor-detail">
					<div class="constructor-signature">
						<strong>{+data.alias+}</strong>: 
						<if test="data.isPseudo">
							This element has no direct constructor. To create an instance of this element you have to call {+(new Link().toSymbol("JXG.Board#create"))+} with type "{+data.alias.toLowerCase()+}".
						</if>
						<if test="!data.isPseudo">
							{!
								var flags = [];
								if (data.isPrivate) flags.push("private");
								if (data.isInner) flags.push("inner");
								var flagsStr = flags.length ? " [" + flags.join(", ") + "]" : "";
							!}
							{+flagsStr+}<if test="(classType != 'Namespace ') && (classType != 'Element ')">{+makeSignature(data.params)+}</if>
						</if>
					</div>

					<div class="constructor-description">
						{+resolveLinks(data.desc)+}
						<if test="data.author"><br>Author: {+data.author+}</if>
					</div>

					<if test="data.params.length && !data.isNamespace">
						<div class="constructor-params">
							<h3><if test="data.isPseudo">Possible parent array combinations:</if><if test="!data.isPseudo">Parameters:</if></h3>
							<for each="item" in="data.params">
								<div class="param-item">
									<if test="!data.isPseudo">
										<strong>{+item.name+}</strong>
										<if test="item.type"> ({+item.type+})</if>
										<if test="item.isOptional"> [Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if>]</if>
									</if>
									<if test="data.isPseudo">
										{!
											var itypes = item.type.split('_');
											var inames = item.name.split(',');
											for(var i=0; i<itypes.length; i++) {
												output += "{" + itypes[i] + "} " + inames[i].toString().replace(/_/g, "");
												if(inames[i][inames[i].length-1] == "_")
													output += " [Optional]";
												output += (i < itypes.length - 1) ? ", " : "";
											}
										!}
									</if>
									: {+resolveLinks(item.desc)+}
								</div>
							</for>
						</div>
					</if>

					<if test="data.deprecated">
						<div class="deprecated">
							<h3>Deprecated:</h3>
							<p>{+resolveLinks(data.deprecated)+}</p>
						</div>
					</if>

					<if test="data.since">
						<div class="since">
							<h3>Since:</h3>
							<p>{+data.since+}</p>
						</div>
					</if>

					<if test="data.exceptions.length">
						<div class="exceptions">
							<h3>Throws:</h3>
							<for each="item" in="data.exceptions">
								<div class="exception-item">
									<strong>{+item.name+}</strong>
									<if test="item.type"> ({+item.type+})</if>
									: {+resolveLinks(item.desc)+}
								</div>
							</for>
						</div>
					</if>

					<if test="data.returns.length">
						<div class="returns">
							<h3>Returns:</h3>
							<for each="item" in="data.returns">
								<div class="return-item">
									<if test="item.type">({+item.type+})</if>
									{+resolveLinks(item.desc)+}
								</div>
							</for>
						</div>
					</if>

					<if test="data.requires.length">
						<div class="requires">
							<h3>Requires:</h3>
							<ul>
								<for each="item" in="data.requires">
									<li>{+resolveLinks(item)+}</li>
								</for>
							</ul>
						</div>
					</if>

					<if test="data.see.length">
						<div class="see-also">
							<h3>See Also:</h3>
							<ul>
								<for each="item" in="data.see">
									<li>{+item+}</li>
								</for>
							</ul>
						</div>
					</if>

					<if test="data.example.length">
						<div class="examples">
							<h3>Examples:</h3>
							<for each="example" in="data.example">
								<pre><code>{+example+}</code></pre>
							</for>
						</div>
					</if>
				</div>
			</if>

<!-- ============================== attributes details ========================== -->
			<if test="defined(ownAttributes) && ownAttributes.length">
				<div class="sectionTitle">
    				 Attribute Detail
				</div>
				<for each="member" in="ownAttributes">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					!}

					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>

					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>

					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>

						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.defaultValue">
							<dl class="detailList">
							<dt class="heading">Default Value:</dt>
							<dd>
								{+resolveLinks(member.defaultValue)+}
							</dd>
							</dl>
						</if>

					<if test="!$member_last"><hr /></if>
				</for>
			</if>

<!-- ============================== field details ========================== -->
			<if test="defined(ownProperties) && ownProperties.length">
				<div class="sectionTitle">
                     Field Detail
				</div>
				<for each="member" in="ownProperties">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					!}

					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>

					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>

					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>

						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.defaultValue">
							<dl class="detailList">
							<dt class="heading">Default Value:</dt>
							<dd>
								{+resolveLinks(member.defaultValue)+}
							</dd>
							</dl>
						</if>

					<if test="!$member_last"><hr /></if>
				</for>
			</if>

<!-- ============================== method details ========================= -->
			<if test="defined(ownMethods) && ownMethods.length">
				<div class="sectionTitle">
					Method Detail
				</div>
				<for each="member" in="ownMethods">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}

					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}

					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>

						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>

					<if test="member.example.length">
					<dl class="detailList">
					<dt class="heading">Examples:</dt>
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</dl>
					</if>

					<if test="!$member_last"><hr /></if>
				</for>
			</if>

<!-- ============================== event details ========================= -->
			<if test="defined(ownEvents) && ownEvents.length">
				<div class="sectionTitle">
					Event Detail
				</div>
				<for each="member" in="ownEvents">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}

					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}

					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>

					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>

						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>

					<if test="!$member_last"><hr /></if>
				</for>
			</if>

			<hr />

			<if test="data.isPseudo">
                <if test="data.inheritsFrom.length">
                <div class="sectionTitle">
                    Attributes borrowed from other Elements
                </div>

                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias && $.isAttribute});

                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        output +=
                            "<dt>Attributes borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }
                !}
                </dl>
                </if>

                <hr />

				<if test="data.inheritsFrom.length">
				<div class="sectionTitle">
					Fields borrowed from other Elements
				</div>

				<dl class="inheritsList">
				{!
					var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias && !$.isAttribute});

					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				!}
				</dl>
				</if>

				<hr />
				<if test="data.inheritsFrom.length">
				<div class="sectionTitle">
					Methods borrowed from other Elements
				</div>
				<dl class="inheritsList">
				{!
					var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}

				!}
				</dl>
				</if>

                <hr />
                <if test="data.inheritsFrom.length">
   				<div class="sectionTitle">
    				Events borrowed from other Elements
                </div>
                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        output +=
                            "<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }

                !}
                </dl>
                </if>

            </if>

		</div>


<!-- ============================== footer ================================= -->
		<div class="fineprint" style="clear:both">
			<if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
			Documentation generated by <a href="https://www.npmjs.com/package/jsdoc-toolkit" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
		</div>
	</body>
</html>
